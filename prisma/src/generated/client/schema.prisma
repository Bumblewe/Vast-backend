datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./src/generated/client"
}


model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(USER)
  mobile    String
  address   String
  cartId    String? // Foreign Key to Cart
  cart      Cart? @relation(fields: [cartId], references: [id])

  @@index([cartId])
}

model Cart {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  user       User[]
  cartItems  CartItem[] // Relation to CartItem model
  updatedAt  DateTime    @updatedAt

}

// Intermediary for a many-to-many relationship
model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String // Foreign Key to Cart
  cart      Cart   @relation(fields: [cartId], references: [id])
  sizeId    String      @default("")
  colorId   String      @default("")
  quantity  String      @default("")
  productId String // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])

  @@index([colorId])
  @@index([sizeId])
  @@index([cartId])
  @@index([productId])
}


model Store {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  userId     String
  billboards Billboard[] @relation("StoreToBillboard")
  types      Type[]      @relation("StoreToType")
  banners    Banner[]    @relation("StoreToBanner")
  categories Category[]  @relation("StoreToCategory")
  products   Product[]   @relation("StoreToProduct")
  parents    Parent[]    @relation("StoreToParent")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  orders     Order[]     @relation("StoreToOrder")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Billboard {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeId])
}

model Banner {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String
  store      Store      @relation("StoreToBanner", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String // Foreign Key to Store
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String // Foreign Key to Billboard
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  name        String
  products    Product[] @relation("CategoryToProduct")
  parentId    String // Foreign Key to Parent
  parent      Parent    @relation(fields: [parentId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
  @@index([parentId])
}

model Parent {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String // Foreign Key to Store
  store      Store      @relation("StoreToParent", fields: [storeId], references: [id])
  name       String
  categories Category[]
  typeId     String // Foreign Key to Type
  type       Type @relation(fields: [typeId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeId])
  @@index([typeId])
}

model Type {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String
  store      Store      @relation("StoreToType", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  parents    Parent[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeId])
}

model Product {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String // Foreign Key to Store
  store      Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String // Foreign Key to Category
  category   Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name       String
  price      String
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  sizeId     String // Foreign Key to Size
  size       Size        @relation(fields: [sizeId], references: [id])
  colorId    String // Foreign Key to Color
  color      Color       @relation(fields: [colorId], references: [id])
  images     Image[] // Relation to Image model
  cartItems  CartItem[]
  orderItems OrderItem[] // Relation to Order model
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String // Foreign Key to Store
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Size {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String // Foreign Key to Store
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Otp {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  mobile    String
  otp       String     
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Color {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String // Foreign Key to Store
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String // Foreign Key to Product
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String // URL of the image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

enum Role {
  USER
  ADMIN
}
